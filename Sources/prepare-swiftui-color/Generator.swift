//
//  Generator.swift
//  
//
//  Created by p-x9 on 2022/10/22.
//  
//

import Foundation

extension String {
    static var tab: String {
        "    "
    }
}

class Generator {
    private let fileManger = FileManager.default
    
    let assetURL: URL
    let outputURL: URL
    
    private var header: String {
        """
        // swiftlint:disable all
        // Generated by SwiftUIColor (https://github.com/p-x9/SwiftUIColor)
        
        import SwiftUI
        
        public extension Color {
        
        """
    }
    
    public init(assetURL: URL, outputURL: URL) {
        self.assetURL = assetURL
        self.outputURL = outputURL
    }
    
    public func generate() throws {
        let childDirectories = try fileManger.subpathsOfDirectory(atPath: assetURL.path)
        try childDirectories.forEach {
            try generate(for: assetURL.appendingPathComponent($0))
        }
    }
}

extension Generator {
    private func generate(for directory: URL) throws {
        guard fileManger.fileExists(atPath: directory.path) else { return }
        let suffix = directory.lastPathComponent
        
        let colorNames = try? fileManger.contentsOfDirectory(atPath: directory.path)
            .filter {
                $0.hasSuffix(".colorset")
            }
            .compactMap {
                $0.components(separatedBy: ".colorset").first
            }
        
        let tab = String.tab

        // header
        var output = header

        // color enum
        output +=
        """
        \(tab)enum \(suffix) {
        
        """
        
        guard let colorNames, !colorNames.isEmpty else { return }
        
        colorNames.forEach {
            guard let propertyName = $0.components(separatedBy: "_").last else { return }
            output +=
            """
            \(tab)\(tab)public static let \(propertyName) = Color("\(suffix)/\($0)", bundle: .myModule)\n
            """
        }
        
        output +=
        """
        \(tab)}
        }
        """

        // color list
        let propertyNames = colorNames.compactMap {
            $0.components(separatedBy: "_").last
        }

        output +=
        """
        \n
        extension Color.\(suffix) {
        \(tab)public static let colors = [\(propertyNames.joined(separator: ", "))]
        \n
        \(tab)public static let colorNames = [\(propertyNames.map({ "\"\($0)\"" }).joined(separator: ", "))]
        }
        """
        
        let outputURL = self.outputURL.appendingPathComponent("Color+\(suffix).swift")
        if fileManger.fileExists(atPath: outputURL.path) {
            try? fileManger.removeItem(at: outputURL)
        }
        
        guard let data = output.data(using: .utf8) else { return }
        
        try data.write(to: outputURL)
    }
}
