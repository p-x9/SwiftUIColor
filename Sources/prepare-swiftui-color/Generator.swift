//
//  Generator.swift
//
//
//  Created by p-x9 on 2022/10/22.
//
//

import Foundation

extension String {
    static var tab: String {
        "    "
    }
}

class Generator {
    private let fileManger = FileManager.default

    let assetURL: URL
    let outputURL: URL

    private var header: String {
        """
        // swiftlint:disable all
        // Generated by SwiftUIColor (https://github.com/p-x9/SwiftUIColor)

        import SwiftUI
        """
    }

    public init(assetURL: URL, outputURL: URL) {
        self.assetURL = assetURL
        self.outputURL = outputURL
    }

    public func generate() throws {
        let childDirectories = try fileManger.contentsOfDirectory(atPath: assetURL.path)
        try childDirectories.forEach {
            try generate(for: assetURL.appendingPathComponent($0))
        }
    }
}

extension Generator {
    private func generate(for directory: URL) throws {
        guard fileManger.fileExists(atPath: directory.path) else { return }
        let suffix = directory.lastPathComponent

        let colorNames = try? fileManger.contentsOfDirectory(atPath: directory.path)
            .filter {
                $0.hasSuffix(".colorset")
            }
            .compactMap {
                $0.components(separatedBy: ".colorset").first
            }

        guard let colorNames, !colorNames.isEmpty else { return }

        // header
        let output = """
        \(header)

        public extension Color {
        \(generateEnum(suffix: suffix, colorNames: colorNames))
        }

        public extension Color {
        \(generateStruct(suffix: suffix, colorNames: colorNames))
        }

        public extension Color.\(suffix.titled) {
        \(generateCallAsFunction(suffix: suffix))
        }

        public extension Color {
            static let \(suffix) = \(suffix.titled)()
        }

        public extension Color.\(suffix.titled) {
        \(generateUtility(suffix: suffix, colorNames: colorNames))
        }

        """

        let outputURL = self.outputURL.appendingPathComponent("Color+\(suffix).swift")
        if fileManger.fileExists(atPath: outputURL.path) {
            try? fileManger.removeItem(at: outputURL)
        }

        guard let data = output.data(using: .utf8) else { return }

        try data.write(to: outputURL)
    }

    private func generateEnum(suffix: String, colorNames: [String]) -> String {
        let cases = colorNames.map { "    case \($0)" }
        return """
            enum \(suffix)Constant: String, CaseIterable {
            \(cases.joined(separator: "\n    "))

                var name: String { rawValue }
            }
        """
    }

    private func generateStruct(suffix: String, colorNames: [String]) -> String {
        let colors = colorNames.map {
            """
                    public let \($0) = Color(\"\(suffix)/\($0)\", bundle: .myModule)
            """
        }
        return """
            struct \(suffix.titled) {
        \(colors.joined(separator: "\n\n"))
            }
        """
    }

    private func generateCallAsFunction(suffix: String) -> String {
        """
            func callAsFunction(_ constant: Color.\(suffix)Constant) -> Color {
                Color(\"\(suffix)/\\(constant.rawValue)\", bundle: .myModule)
            }
        """
    }

    private func generateUtility(suffix: String, colorNames: [String]) -> String {
        """
            var colors: [Color] {
                Color.\(suffix)Constant.allCases.map { Color.\(suffix)($0) }
            }

            var colorNames: [String] {
                Color.\(suffix)Constant.allCases.map { $0.name }
            }
        """
    }
}

extension String {
    var titled: String {
        guard !isEmpty else { return self }
        return self.prefix(1).uppercased() + self.dropFirst()
    }
}
