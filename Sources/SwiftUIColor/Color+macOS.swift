// swiftlint:disable all
// Generated by SwiftUIColor (https://github.com/p-x9/SwiftUIColor)

import SwiftUI

public extension Color {
    enum macOSConstant: String, CaseIterable {
        case controlAccentColor
        case keyboardFocusIndicatorColor
        case systemRed
        case systemPurple
        case alternateSelectedControlColor
        case controlColor
        case selectedControlColor
        case alternateSelectedControlTextColor
        case systemIndigo
        case systemGreen
        case textBackgroundColor
        case labelColor
        case systemPink
        case linkColor
        case unemphasizedSelectedTextColor
        case windowFrameTextColor
        case controlTextColor
        case systemGray
        case tertiaryLabelColor
        case systemOrange
        case controlBackgroundColor
        case unemphasizedSelectedTextBackgroundColor
        case selectedTextBackgroundColor
        case systemBlue
        case underPageBackgroundColor
        case secondaryLabelColor
        case windowBackgroundColor
        case gridColor
        case headerTextColor
        case selectedControlTextColor
        case systemCyan
        case findHighlightColor
        case systemYellow
        case systemBrown
        case unemphasizedSelectedContentBackgroundColor
        case selectedTextColor
        case disabledControlTextColor
        case systemMint
        case selectedMenuItemTextColor
        case quaternaryLabelColor
        case systemTeal
        case placeholderTextColor
        case textColor
        case separatorColor
        case selectedContentBackgroundColor

        var name: String { rawValue }
    }
}

public extension Color {
    struct MacOS {
        public let controlAccentColor = Color("macOS/controlAccentColor", bundle: .myModule)

        public let keyboardFocusIndicatorColor = Color("macOS/keyboardFocusIndicatorColor", bundle: .myModule)

        public let systemRed = Color("macOS/systemRed", bundle: .myModule)

        public let systemPurple = Color("macOS/systemPurple", bundle: .myModule)

        public let alternateSelectedControlColor = Color("macOS/alternateSelectedControlColor", bundle: .myModule)

        public let controlColor = Color("macOS/controlColor", bundle: .myModule)

        public let selectedControlColor = Color("macOS/selectedControlColor", bundle: .myModule)

        public let alternateSelectedControlTextColor = Color("macOS/alternateSelectedControlTextColor", bundle: .myModule)

        public let systemIndigo = Color("macOS/systemIndigo", bundle: .myModule)

        public let systemGreen = Color("macOS/systemGreen", bundle: .myModule)

        public let textBackgroundColor = Color("macOS/textBackgroundColor", bundle: .myModule)

        public let labelColor = Color("macOS/labelColor", bundle: .myModule)

        public let systemPink = Color("macOS/systemPink", bundle: .myModule)

        public let linkColor = Color("macOS/linkColor", bundle: .myModule)

        public let unemphasizedSelectedTextColor = Color("macOS/unemphasizedSelectedTextColor", bundle: .myModule)

        public let windowFrameTextColor = Color("macOS/windowFrameTextColor", bundle: .myModule)

        public let controlTextColor = Color("macOS/controlTextColor", bundle: .myModule)

        public let systemGray = Color("macOS/systemGray", bundle: .myModule)

        public let tertiaryLabelColor = Color("macOS/tertiaryLabelColor", bundle: .myModule)

        public let systemOrange = Color("macOS/systemOrange", bundle: .myModule)

        public let controlBackgroundColor = Color("macOS/controlBackgroundColor", bundle: .myModule)

        public let unemphasizedSelectedTextBackgroundColor = Color("macOS/unemphasizedSelectedTextBackgroundColor", bundle: .myModule)

        public let selectedTextBackgroundColor = Color("macOS/selectedTextBackgroundColor", bundle: .myModule)

        public let systemBlue = Color("macOS/systemBlue", bundle: .myModule)

        public let underPageBackgroundColor = Color("macOS/underPageBackgroundColor", bundle: .myModule)

        public let secondaryLabelColor = Color("macOS/secondaryLabelColor", bundle: .myModule)

        public let windowBackgroundColor = Color("macOS/windowBackgroundColor", bundle: .myModule)

        public let gridColor = Color("macOS/gridColor", bundle: .myModule)

        public let headerTextColor = Color("macOS/headerTextColor", bundle: .myModule)

        public let selectedControlTextColor = Color("macOS/selectedControlTextColor", bundle: .myModule)

        public let systemCyan = Color("macOS/systemCyan", bundle: .myModule)

        public let findHighlightColor = Color("macOS/findHighlightColor", bundle: .myModule)

        public let systemYellow = Color("macOS/systemYellow", bundle: .myModule)

        public let systemBrown = Color("macOS/systemBrown", bundle: .myModule)

        public let unemphasizedSelectedContentBackgroundColor = Color("macOS/unemphasizedSelectedContentBackgroundColor", bundle: .myModule)

        public let selectedTextColor = Color("macOS/selectedTextColor", bundle: .myModule)

        public let disabledControlTextColor = Color("macOS/disabledControlTextColor", bundle: .myModule)

        public let systemMint = Color("macOS/systemMint", bundle: .myModule)

        public let selectedMenuItemTextColor = Color("macOS/selectedMenuItemTextColor", bundle: .myModule)

        public let quaternaryLabelColor = Color("macOS/quaternaryLabelColor", bundle: .myModule)

        public let systemTeal = Color("macOS/systemTeal", bundle: .myModule)

        public let placeholderTextColor = Color("macOS/placeholderTextColor", bundle: .myModule)

        public let textColor = Color("macOS/textColor", bundle: .myModule)

        public let separatorColor = Color("macOS/separatorColor", bundle: .myModule)

        public let selectedContentBackgroundColor = Color("macOS/selectedContentBackgroundColor", bundle: .myModule)
    }
}

public extension Color.MacOS {
    func callAsFunction(_ constant: Color.macOSConstant) -> Color {
        Color("macOS/\(constant.rawValue)", bundle: .myModule)
    }
}

public extension Color {
    static let macOS = MacOS()
}

public extension Color.MacOS {
    var colors: [Color] {
        Color.macOSConstant.allCases.map { Color.macOS($0) }
    }

    var colorNames: [String] {
        Color.macOSConstant.allCases.map { $0.name }
    }
}
